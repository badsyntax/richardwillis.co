<% include partials/head %>
  <body>
    <div class="container">

      <% include partials/header %>

      <section class="section intro">
        <h2>Showcase</h2>
        <p>
          I've started writing code from a young age and still very much enjoy
          programming and creatively solving problems. I'm always interested in
          learning new approaches and perspectives in order to solve problems better.
        </p>
        <p>
          I've mostly stuck with web technologies, as the Internet and sharing of
          data and knowledge is something that interests me. I'm a huge Open Source
          fan and take pleasure in sharing code and knowledge.
        </p>
      </section>

      <section class="section agency-work">
        <h2>Agency work</h2>
        <div class="content-block">
          <p>I have worked on many large, high profile websites, including:</p>
          <ul>
            <li>FIBA</li>
            <li>Canon</li>
            <li>DeBeers</li>
            <li>National Rail Enquiries</li>
            <li>Informa</li>
          </ul>
          <ul>
            <li>BP</li>
            <li>PepsiCo</li>
            <li>SLH</li>
            <li>RICS</li>
            <li>Crossrail</li>
          </ul>
        </div>
      </section>

      <section class="section projects list">

        <h2>Open source / personal work</h2>

        <section class="content-block filter" id="filter">
          <h3>Filter by:</h3>
          <p>
            <a href="#" data-tag="python">Python</a> &ndash;
            <a href="#" data-tag="js">JavaScript</a> &ndash;
            <a href="#" data-tag="node">Node.js</a> &ndash;
            <a href="#" data-tag="sass">Sass</a> &ndash;
            <a href="#" data-tag="php">PHP</a> &ndash;
            <a href="#" data-tag="tests">Unit Testing</a> &ndash;
            <a href="#" data-tag="bash">BASH</a>  &ndash;
            <a href="#" data-tag="all">All</a>
          </p>
        </section>

        <section class="content-block" data-tags='["php","js"]'>
          <header class="header">
            <div class="overview">
              <h3>OpenEyes</h3>
              <p class="description">An Open Source electronic patient record system</p>
              <p class="repo"><a href="https://github.com/openeyes">https://github.com/openeyes</a></p>
            </div>
          </header>
          <p>Working mainly on the front-end, and helping with back-end
            tasks when required.</p>
        </section>

        <section class="content-block" data-tags='["js"]'>
          <header class="header">
            <div class="overview">
              <h3>OpenEyes POC</h3>
              <p class="description">A POC for a new architecture for the OpenEyes application</p>
              <p class="repo"><a href="https://github.com/openeyes/poc-frontend">https://github.com/openeyes/poc-frontend</a></p>
            </div>
          </header>
          <p>A Single Page Application using AngularJS with a Scala HTTP REST API.</p>
        </section>

        <section class="content-block" data-tags='["python"]'>
          <header class="header">
            <div class="overview">
              <h3>SassBeautify</h3>
              <p class="description">A Sublime Text plugin that beautifies Sass files</p>
              <p class="repo"><a href="http://github.com/badsyntax/SassBeautify">http://github.com/badsyntax/SassBeautify</a></p>
            </div>
          </header>
          <p>My first Python project! This is basic plugin I wrote for the Sublime Text editor, and provides
          the ability to run the <code>sass-convert</code> utility on your Sass code from within the editor.</p>
        </section>

        <section class="content-block" data-tags='["node"]'>
          <header class="header">
            <div class="overview">
              <h3>atom-sassbeautify</h3>
              <p class="description">Beautify your Sass files</p>
              <p class="repo"><a href="https://github.com/badsyntax/atom-sassbeautify">https://github.com/badsyntax/atom-sassbeautify</a></p>
            </div>
          </header>
          <p>Similar to SassBeautify, but written in JavaScript for the Atom editor.</p>
        </section>

        <section class="content-block" data-tags='["node"]'>
          <header class="header">
            <div class="overview">
              <h3>badsyntax.co</h3>
              <p class="description">My personal website</p>
              <p class="repo"><a href="https://github.com/badsyntax/badsyntax.co">https://github.com/badsyntax/badsyntax.co</a></p>
            </div>
          </header>
          <p>This was my first real taste of Node.js development. It's a site built on Express.js and uses JSON files for
          content.</p>
        </section>

        <section class="content-block" data-tags='["node"]'>
          <header class="header">
            <div class="overview">
              <h3>xen</h3>
              <p class="description">A node &amp; express site generator.</p>
              <p class="repo"><a href="https://github.com/badsyntax/xen">https://github.com/badsyntax/xen</a></p>
            </div>
          </header>
          <p>An attempt to create a site generator using some of the concepts from my badsyntax.co site.
          The intent was to use grunt to manage the JSON content files.</p>
          <p>It was a really fun project, and <a href="https://github.com/badsyntax/xen/tree/master/xen">I wrote some good code</a>, but eventually I gave up on the idea.</p>
        </section>

        <section class="content-block" data-tags='["node", "tests"]'>
          <header class="header">
            <div class="overview">
              <h3>staticx</h3>
              <p class="description">A node.js static site generator</p>
              <p class="repo"><a href="https://github.com/badsyntax/staticx">https://github.com/badsyntax/staticx</a></p>
            </div>
          </header>
          <p>A node.js module that can be used to generate static websites from markdown files. It supports themes
          with a MVVM architecture, giving the user complete control over how their site is rendered.
          Unfortunately, it is not complete, but there is some good code in this project and is well tested.</p>
        </section>

        <section class="content-block" data-tags='["js", "tests"]'>
          <header class="header">
            <div class="overview">
              <h3>handlebars-form-helpers</h3>
              <p class="description">Form helpers for handlebars</p>
              <p class="repo"><a href="https://github.com/badsyntax/handlebars-form-helpers">https://github.com/badsyntax/handlebars-form-helpers</a></p>
            </div>
          </header>
          <p>This libary provides many form related helpers that you can use to build forms. It is extremely well tested, I
          am unsure if anyone is actually using this plugin, but I have had zero bug reports.</p>
        </section>

        <section class="content-block" data-tags='["js", "node"]'>
          <header class="header">
            <div class="overview">
              <h3>polymer-twitter</h3>
              <p class="description">An example twitter stream built with polymer web components</p>
              <p class="repo"><a href="https://github.com/badsyntax/polymer-twitter">https://github.com/badsyntax/polymer-twitter</a></p>
            </div>
          </header>
          <p>This was my first introduction to Polymer and Web Components. It's an extremely simple app and simply shows a twitter stream,
          using a Node.js API.</p>
        </section>

        <section class="content-block" data-tags='["php"]'>
          <header class="header">
            <div class="overview">
              <h3>Proxima CMS</h3>
              <p class="description">A Kohana 3 powered content management system</p>
              <p class="repo"><a href="https://github.com/proxima-cms">https://github.com/proxima-cms</a></p>
            </div>
          </header>
          <p>A PHP CMS I built using the Kohana 3 framework, utilising concepts like HMVC, themes and components.</p>
        </section>

        <section class="content-block" data-tags='["js", "php", "tests"]'>
          <header class="header">
            <div class="overview">
              <h3>jquery-spellchecker</h3>
              <p class="description">A lightweight jQuery plugin that can check the spelling of text within a form field or DOM tree</p>
              <p class="repo"><a href="https://github.com/badsyntax/jquery-spellchecker">https://github.com/badsyntax/jquery-spellchecker</a></p>
            </div>
          </header>
          <p>I wanted to improve on the spell-checking plugin that was packaged with TinyMCE.</p>
        </section>

        <section class="content-block" data-tags='["node"]'>
          <header class="header">
            <div class="overview">
              <h3>mp3-arrange</h3>
              <p class="description">Arrange your music collection </p>
              <p class="repo"><a href="https://github.com/badsyntax/mp3-arrange">https://github.com/badsyntax/mp3-arrange</a></p>
            </div>
          </header>
          <p>A small and well-tested node.js module that will arrange your MP3 collection.</p>
        </section>

        <section class="content-block" data-tags='["js", "php"]'>
          <header class="header">
            <div class="overview">
              <h3>map-route</h3>
              <p class="description">An interactive route planner for travelers.</p>
              <p class="repo"><a href="https://github.com/badsyntax/map-route">https://github.com/badsyntax/map-route</a></p>
            </div>
          </header>
          <p>A route planner, built using Knockout.js, Kohana, Google Maps, MySQl and OAuth2 (amongst other technologies).</p>
        </section>

        <section class="content-block" data-tags='["bash"]'>
          <header class="header">
            <div class="overview">
              <h3>itunes-utils</h3>
              <p class="description">Manage your itunes library</p>
              <p class="repo"><a href="https://github.com/badsyntax/itunes-utils">https://github.com/badsyntax/itunes-utils</a></p>
            </div>
          </header>
          <p>A really old script I wrote to manage my itunes library, using Bash and AppleScript.</p>
        </section>

        <section class="content-block" data-tags='["sass"]'>
          <header class="header">
            <div class="overview">
              <h3>Sprite States</h3>
              <p class="description">A custom compass sprite mixin</p>
              <p class="repo"><a href="https://gist.github.com/badsyntax/6061929">https://gist.github.com/badsyntax/6061929</a></p>
            </div>
          </header>
          <p>A sprite generator that can generate state pseudo selectors.</p>
        </section>
      </section>

      <section class="section">
        <h2>Community involvement</h2>
        <div class="content-block">
          <p>I try to contribute wherever I can. Here are some notable contributions:</p>
          <ul>
            <li><a href="https://github.com/padolsey/findAndReplaceDOMText/pull/5">padolsey/findAndReplaceDOMText/pull/5</a></li>
            <li><a href="https://github.com/asyncly/EventEmitter2/pull/107">asyncly/EventEmitter2/pull/107</a></li>
            <li><a href="https://github.com/flatiron/prompt/pull/77">flatiron/prompt/pull/77</a></li>
            <li><a href="https://github.com/mllrsohn/node-webkit-builder/pull/26">mllrsohn/node-webkit-builder/pull/26</a></li>
            <li><a href="https://github.com/mllrsohn/node-webkit-builder/pull/27">mllrsohn/node-webkit-builder/pull/27</a></li>
            <li><a href="https://github.com/gruntjs/grunt-contrib-compass/pull/84">gruntjs/grunt-contrib-compass/pull/84</a></li>
            <li><a href="https://github.com/tvooo/sublime-grunt/pull/24">tvooo/sublime-grunt/pull/24</a></li>
            <li><a href="https://github.com/kohana/core/pull/203">kohana/core/pull/203</a></li>
            <li><a href="https://github.com/kohana/orm/pull/55">kohana/orm/pull/55</a></li>
            <li><a href="https://github.com/tj/commander.js/issues/183">tj/commander.js/issues/183</a></li>
          </ul>
        </div>
      </section>

      <section class="section">
        <h2>This site</h2>
        <div class="content-block">
          <p>Repository: <a href="https://github.com/badsyntax/richardwillis.co">https://github.com/badsyntax/richardwillis.co</a></p>
          <p>Although this site is really simple, I couldn't help but treat it as
          an opportunity to tune my development and deployment processes. So it
          is <em>incredibly</em> over-engineered, but shows how I would setup a large-scale project.</p>

          <h3>Software overview</h3>

          <p>I use Nginx for serving static files, Node.js for generating HTML templates, Susy and Compass for creating
          the stylesheet.</p>
          <P>I use Capistrano for deploying and building the site on post deploy and Jenkins for continuous integration. I host the code on github and Jenkins jobs are triggered by a git post-receive web hook.</p>

          <h3>Server overview:</h3>
          <ul>
            <li>I created a new Linux Container to host both staging and production versions of the site, running Ubuntu 12.04.</li>
            <li>I created a new Linux Container to host Jenkins.</li>
          </ul>

          <h3>Dev overview and workflow:</h3>

          <p>
            On my desktop machine (Ubuntu 14.04), I use Vagrant to provision a Linux VM (Ubuntu 12.04).
          </p>

          <p>
            I use bundler to install app gem dependencies locally. I use npm scripts to create handy commands,
            like "npm run build". I execute gem bins like so: "bundle exec compass compile -c config/compass.rb"
          </p>

          <p>
            Following the git-flow model, I'll work in feature branches. When I merge features into develop,
            and push the develop branch, a Jenkins job will be triggered to build the application and deploy to
             the staging environment.
          </p>

          <p>
            If I'm happy with my changes in develop, I'll merge develop into master, and push master, which will
            trigger a separate Jenkins job to build the application and deploy to the production environment.
            I might use tags instead of master in the future.
          </p>

          <h3>My CV</h3>

          <p>I created my CV in HTML using the same stylesheet as you see now. I use PhantomJS to generate
          a PDF version, this allows me to edit only one content source. New versions of the PDF are generated whenever
          the site is deployed.</p>
        </div>
      </section>

      <section class="section">
        <h2>My server</h2>
        <div class="content-block">
          <p>
            Probably my proudest achievement, I have spent many years tweaking
            my server setup. I use my server mainly to host websites, and I rent out
            some of the space to clients.
          </p>
          <h3>Overview &amp; Specs</h3>
          <p>I rent a dedicated server from Hetzner in Germany with the following specs:</p>
          <ul>
            <li>Intel® Core™ i7-4770 Quad-Core Haswell</li>
            <li>2 x 2 TB SATA</li>
            <li>32 GB DDR3 RAM</li>
          </ul>
          <p>I've configured the server to have the following setup:</p>
          <ul>
            <li>128Gb in RAID-1 for host OS (Ubuntu 12.04)</li>
            <li>ZFS mirrored pool for the risk of the disk space</li>
            <li>The host OS is minimal, mostly everything runs in Linux Containers (using LXC) with ZFS backing store</li>
            <li>Nginx is used as a reverse HTTP proxy into the containers</li>
          </ul>
          <h3>
              Backups and monitoring setup:
          </h3>
          <p>
            I use a separate VPS instance, within the same data-center, to manage backups and monitoring of
            my host machine.
          </p>
          <p>
             Due to use of ZFS, I can take archived container snapshots of each of the Linux Containers. This
             makes restoring entire containers really easy, with no risk of data loss.
          </p>
          <p>
            I sync backups to a local drive as well as Amazon S3. I keep backups for a week, and
            this process is all fully-automated.
          </p>
          <p>
            I've installed Nagios "remote plugin executor" libraries in my containers, and run the Nagios
            checks from my VPS instance.
          </p>
          <h3>Container usage</h3>
          <p>Each client will have their own container with root access, and they are free to
          do what they want with their container. I set disk/memory and CPU usage quotas to prevent them
          using up all the resources.</p>
          <p>For personal use, I'll create a new container for each website/project. This allows me to
          provision the container exactly how I want it without having conflicting package versions.</p>
        </div>
      </section>

      <script>
        (function initFilter() {

          var sections = get('section[data-tags]');

          function get() {
            return document.querySelectorAll.apply(document, arguments);
          }

          function on(elem, evt, fn) {
            elem.addEventListener(evt, fn, false);
          }

          function addClass(elem, cls) {
            elem.className = elem.className
              .split(' ')
              .concat(cls.split(' '))
              .join(' ');
          }

          function removeClass(elem, cls) {
            elem.className = elem.className
              .split(' ')
              .filter(function(c) {
                return cls.split(' ').indexOf(c) === -1;
              })
              .join(' ');
          }

          function filter(tag) {
            var last = -1;
            for(var i = 0; i < sections.length; i++) {
              var tags = JSON.parse(
                sections[i].getAttribute('data-tags')
              );
              removeClass(sections[i], 'filter-hide filter-last');
              if (tag === 'all' || tags.indexOf(tag) > -1) {
                last = i;
              } else {
                addClass(sections[i], 'filter-hide');
              }
            }
            if (last !== -1) {
              addClass(sections[last], 'filter-last');
            }
          }

          on(get('#filter')[0], 'click', function(e) {
            var target = e.target;
            if (target.nodeName !== 'A') return;
            e.preventDefault();
            filter(target.getAttribute('data-tag'))
          });
        }());
      </script>
    </div>
  </body>
</html>